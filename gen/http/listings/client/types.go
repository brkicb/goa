// Code generated by goa v3.16.1, DO NOT EDIT.
//
// listings HTTP client types
//
// Command:
// $ goa gen listings.com/design

package client

import (
	goa "goa.design/goa/v3/pkg"
	listings "listings.com/gen/listings"
)

// AddRequestBody is the type of the "listings" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Unique identifier of the listing
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Unique identifier of the listing
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Address of the house
	Address string `form:"address" json:"address" xml:"address"`
	// Price of the house
	Price int64 `form:"price" json:"price" xml:"price"`
}

// UpdateRequestBody is the type of the "listings" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	Listing *ListingRequestBody `form:"listing" json:"listing" xml:"listing"`
}

// ListResponseBody is the type of the "listings" service "list" endpoint HTTP
// response body.
type ListResponseBody []*ListingResponse

// GetResponseBody is the type of the "listings" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Unique identifier of the listing
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Unique identifier of the listing
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Address of the house
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Price of the house
	Price *int64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// ListingResponse is used to define fields on response body types.
type ListingResponse struct {
	// Unique identifier of the listing
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Unique identifier of the listing
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Address of the house
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Price of the house
	Price *int64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// ListingRequestBody is used to define fields on request body types.
type ListingRequestBody struct {
	// Unique identifier of the listing
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Unique identifier of the listing
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Address of the house
	Address string `form:"address" json:"address" xml:"address"`
	// Price of the house
	Price int64 `form:"price" json:"price" xml:"price"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "listings" service.
func NewAddRequestBody(p *listings.Listing) *AddRequestBody {
	body := &AddRequestBody{
		ID:      p.ID,
		Slug:    p.Slug,
		Address: p.Address,
		Price:   p.Price,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "listings" service.
func NewUpdateRequestBody(p *listings.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{}
	if p.Listing != nil {
		body.Listing = marshalListingsListingToListingRequestBody(p.Listing)
	}
	return body
}

// NewListing2OK builds a "listings" service "list" endpoint result from a HTTP
// "OK" response.
func NewListing2OK(body []*ListingResponse) []*listings.Listing {
	v := make([]*listings.Listing, len(body))
	for i, val := range body {
		v[i] = unmarshalListingResponseToListingsListing(val)
	}

	return v
}

// NewGetListingOK builds a "listings" service "get" endpoint result from a
// HTTP "OK" response.
func NewGetListingOK(body *GetResponseBody) *listings.Listing {
	v := &listings.Listing{
		ID:      body.ID,
		Slug:    *body.Slug,
		Address: *body.Address,
		Price:   *body.Price,
	}

	return v
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	return
}

// ValidateListingResponse runs the validations defined on ListingResponse
func ValidateListingResponse(body *ListingResponse) (err error) {
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	return
}
