// Code generated by goa v3.16.1, DO NOT EDIT.
//
// listings HTTP server encoders and decoders
//
// Command:
// $ goa gen listings.com/design

package server

import (
	"context"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	listings "listings.com/gen/listings"
)

// EncodeListResponse returns an encoder for responses returned by the listings
// list endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*listings.Listing)
		enc := encoder(ctx, w)
		body := NewListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeAddResponse returns an encoder for responses returned by the listings
// add endpoint.
func EncodeAddResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusCreated)
		return nil
	}
}

// DecodeAddRequest returns a decoder for requests sent to the listings add
// endpoint.
func DecodeAddRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body AddRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateAddRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewAddListing(&body)

		return payload, nil
	}
}

// EncodeGetResponse returns an encoder for responses returned by the listings
// get endpoint.
func EncodeGetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*listings.Listing)
		enc := encoder(ctx, w)
		body := NewGetResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetRequest returns a decoder for requests sent to the listings get
// endpoint.
func DecodeGetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			slug string

			params = mux.Vars(r)
		)
		slug = params["slug"]
		payload := NewGetPayload(slug)

		return payload, nil
	}
}

// EncodeUpdateResponse returns an encoder for responses returned by the
// listings update endpoint.
func EncodeUpdateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeUpdateRequest returns a decoder for requests sent to the listings
// update endpoint.
func DecodeUpdateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpdateRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			slug string

			params = mux.Vars(r)
		)
		slug = params["slug"]
		payload := NewUpdatePayload(&body, slug)

		return payload, nil
	}
}

// EncodeDeleteResponse returns an encoder for responses returned by the
// listings delete endpoint.
func EncodeDeleteResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteRequest returns a decoder for requests sent to the listings
// delete endpoint.
func DecodeDeleteRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			slug string

			params = mux.Vars(r)
		)
		slug = params["slug"]
		payload := NewDeletePayload(slug)

		return payload, nil
	}
}

// marshalListingsListingToListingResponse builds a value of type
// *ListingResponse from a value of type *listings.Listing.
func marshalListingsListingToListingResponse(v *listings.Listing) *ListingResponse {
	res := &ListingResponse{
		ID:      v.ID,
		Slug:    v.Slug,
		Address: v.Address,
		Price:   v.Price,
	}

	return res
}

// unmarshalListingRequestBodyToListingsListing builds a value of type
// *listings.Listing from a value of type *ListingRequestBody.
func unmarshalListingRequestBodyToListingsListing(v *ListingRequestBody) *listings.Listing {
	res := &listings.Listing{
		ID:      v.ID,
		Slug:    *v.Slug,
		Address: *v.Address,
		Price:   *v.Price,
	}

	return res
}
