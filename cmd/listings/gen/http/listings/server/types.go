// Code generated by goa v3.16.1, DO NOT EDIT.
//
// listings HTTP server types
//
// Command:
// $ goa gen listings.com/design

package server

import (
	goa "goa.design/goa/v3/pkg"
	listings "listings.com/cmd/listings/gen/listings"
)

// AddRequestBody is the type of the "listings" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Unique identifier of the listing
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Unique identifier of the listing
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Address of the house
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Price of the house
	Price *int64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// UpdateRequestBody is the type of the "listings" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	Listing *ListingRequestBody `form:"listing,omitempty" json:"listing,omitempty" xml:"listing,omitempty"`
}

// ListResponseBody is the type of the "listings" service "list" endpoint HTTP
// response body.
type ListResponseBody []*ListingResponse

// GetResponseBody is the type of the "listings" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Unique identifier of the listing
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Unique identifier of the listing
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Address of the house
	Address string `form:"address" json:"address" xml:"address"`
	// Price of the house
	Price int64 `form:"price" json:"price" xml:"price"`
}

// ListNotFoundResponseBody is the type of the "listings" service "list"
// endpoint HTTP response body for the "not_found" error.
type ListNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListInternalErrorResponseBody is the type of the "listings" service "list"
// endpoint HTTP response body for the "internal_error" error.
type ListInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddNotFoundResponseBody is the type of the "listings" service "add" endpoint
// HTTP response body for the "not_found" error.
type AddNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddInternalErrorResponseBody is the type of the "listings" service "add"
// endpoint HTTP response body for the "internal_error" error.
type AddInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetNotFoundResponseBody is the type of the "listings" service "get" endpoint
// HTTP response body for the "not_found" error.
type GetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInternalErrorResponseBody is the type of the "listings" service "get"
// endpoint HTTP response body for the "internal_error" error.
type GetInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateNotFoundResponseBody is the type of the "listings" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateInternalErrorResponseBody is the type of the "listings" service
// "update" endpoint HTTP response body for the "internal_error" error.
type UpdateInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteNotFoundResponseBody is the type of the "listings" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteInternalErrorResponseBody is the type of the "listings" service
// "delete" endpoint HTTP response body for the "internal_error" error.
type DeleteInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListingResponse is used to define fields on response body types.
type ListingResponse struct {
	// Unique identifier of the listing
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Unique identifier of the listing
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// Address of the house
	Address string `form:"address" json:"address" xml:"address"`
	// Price of the house
	Price int64 `form:"price" json:"price" xml:"price"`
}

// ListingRequestBody is used to define fields on request body types.
type ListingRequestBody struct {
	// Unique identifier of the listing
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Unique identifier of the listing
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// Address of the house
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Price of the house
	Price *int64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "listings" service.
func NewListResponseBody(res []*listings.Listing) ListResponseBody {
	body := make([]*ListingResponse, len(res))
	for i, val := range res {
		body[i] = marshalListingsListingToListingResponse(val)
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "listings" service.
func NewGetResponseBody(res *listings.Listing) *GetResponseBody {
	body := &GetResponseBody{
		ID:      res.ID,
		Slug:    res.Slug,
		Address: res.Address,
		Price:   res.Price,
	}
	return body
}

// NewListNotFoundResponseBody builds the HTTP response body from the result of
// the "list" endpoint of the "listings" service.
func NewListNotFoundResponseBody(res *goa.ServiceError) *ListNotFoundResponseBody {
	body := &ListNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListInternalErrorResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "listings" service.
func NewListInternalErrorResponseBody(res *goa.ServiceError) *ListInternalErrorResponseBody {
	body := &ListInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddNotFoundResponseBody builds the HTTP response body from the result of
// the "add" endpoint of the "listings" service.
func NewAddNotFoundResponseBody(res *goa.ServiceError) *AddNotFoundResponseBody {
	body := &AddNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddInternalErrorResponseBody builds the HTTP response body from the
// result of the "add" endpoint of the "listings" service.
func NewAddInternalErrorResponseBody(res *goa.ServiceError) *AddInternalErrorResponseBody {
	body := &AddInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetNotFoundResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "listings" service.
func NewGetNotFoundResponseBody(res *goa.ServiceError) *GetNotFoundResponseBody {
	body := &GetNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInternalErrorResponseBody builds the HTTP response body from the
// result of the "get" endpoint of the "listings" service.
func NewGetInternalErrorResponseBody(res *goa.ServiceError) *GetInternalErrorResponseBody {
	body := &GetInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "listings" service.
func NewUpdateNotFoundResponseBody(res *goa.ServiceError) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateInternalErrorResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "listings" service.
func NewUpdateInternalErrorResponseBody(res *goa.ServiceError) *UpdateInternalErrorResponseBody {
	body := &UpdateInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "listings" service.
func NewDeleteNotFoundResponseBody(res *goa.ServiceError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteInternalErrorResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "listings" service.
func NewDeleteInternalErrorResponseBody(res *goa.ServiceError) *DeleteInternalErrorResponseBody {
	body := &DeleteInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddListing builds a listings service add endpoint payload.
func NewAddListing(body *AddRequestBody) *listings.Listing {
	v := &listings.Listing{
		ID:      body.ID,
		Slug:    *body.Slug,
		Address: *body.Address,
		Price:   *body.Price,
	}

	return v
}

// NewGetPayload builds a listings service get endpoint payload.
func NewGetPayload(slug string) *listings.GetPayload {
	v := &listings.GetPayload{}
	v.Slug = slug

	return v
}

// NewUpdatePayload builds a listings service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, slug string) *listings.UpdatePayload {
	v := &listings.UpdatePayload{}
	v.Listing = unmarshalListingRequestBodyToListingsListing(body.Listing)
	v.Slug = slug

	return v
}

// NewDeletePayload builds a listings service delete endpoint payload.
func NewDeletePayload(slug string) *listings.DeletePayload {
	v := &listings.DeletePayload{}
	v.Slug = slug

	return v
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Listing == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("listing", "body"))
	}
	if body.Listing != nil {
		if err2 := ValidateListingRequestBody(body.Listing); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateListingRequestBody runs the validations defined on ListingRequestBody
func ValidateListingRequestBody(body *ListingRequestBody) (err error) {
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	return
}
