// Code generated by goa v3.16.1, DO NOT EDIT.
//
// listings HTTP client CLI support package
//
// Command:
// $ goa gen listings.com/design

package client

import (
	"encoding/json"
	"fmt"

	goa "goa.design/goa/v3/pkg"
	listings "listings.com/cmd/listings/gen/listings"
)

// BuildAddPayload builds the payload for the listings add endpoint from CLI
// flags.
func BuildAddPayload(listingsAddBody string) (*listings.Listing, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(listingsAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"address\": \"Quo eius impedit.\",\n      \"id\": 1475321351850767455,\n      \"price\": 2997242765460517709,\n      \"slug\": \"Exercitationem sed omnis maxime.\"\n   }'")
		}
	}
	v := &listings.Listing{
		ID:      body.ID,
		Slug:    body.Slug,
		Address: body.Address,
		Price:   body.Price,
	}

	return v, nil
}

// BuildGetPayload builds the payload for the listings get endpoint from CLI
// flags.
func BuildGetPayload(listingsGetSlug string) (*listings.GetPayload, error) {
	var slug string
	{
		slug = listingsGetSlug
	}
	v := &listings.GetPayload{}
	v.Slug = slug

	return v, nil
}

// BuildUpdatePayload builds the payload for the listings update endpoint from
// CLI flags.
func BuildUpdatePayload(listingsUpdateBody string, listingsUpdateSlug string) (*listings.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(listingsUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"listing\": {\n         \"address\": \"Sed laudantium voluptate totam ea.\",\n         \"id\": 2796687764175130019,\n         \"price\": 1129553093244879647,\n         \"slug\": \"Harum beatae provident totam voluptatem.\"\n      }\n   }'")
		}
		if body.Listing == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("listing", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var slug string
	{
		slug = listingsUpdateSlug
	}
	v := &listings.UpdatePayload{}
	if body.Listing != nil {
		v.Listing = marshalListingRequestBodyToListingsListing(body.Listing)
	}
	v.Slug = slug

	return v, nil
}

// BuildDeletePayload builds the payload for the listings delete endpoint from
// CLI flags.
func BuildDeletePayload(listingsDeleteSlug string) (*listings.DeletePayload, error) {
	var slug string
	{
		slug = listingsDeleteSlug
	}
	v := &listings.DeletePayload{}
	v.Slug = slug

	return v, nil
}
